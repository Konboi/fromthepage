section.collection-stats_recent
    .counter(data-prefix="#{number_with_delimiter stats[:contributors]}") #{t('.collaborator', count: stats[:contributors])}
    .counter(data-prefix="#{number_with_delimiter stats[DeedType::PAGE_TRANSCRIPTION]}") #{t('.page_transcribed', count: stats[DeedType::PAGE_TRANSCRIPTION])}
    .counter(data-prefix="#{number_with_delimiter stats[DeedType::NEEDS_REVIEW]}") #{t('.page_marked_needing_review', count: stats[DeedType::NEEDS_REVIEW])}
    .counter(data-prefix="#{number_with_delimiter stats[DeedType::PAGE_REVIEWED]}") #{t('.page_reviewed', count: stats[DeedType::PAGE_REVIEWED])}
    .counter(data-prefix="#{number_with_delimiter stats[DeedType::PAGE_EDIT]}") #{t('.page_edit', count: stats[DeedType::PAGE_EDIT])}
    -if @collection.works.where(supports_translation: true).exists?
      .counter(data-prefix="#{number_with_delimiter stats[DeedType::PAGE_TRANSLATED]}") #{t('.page_translated', count: stats[DeedType::PAGE_TRANSLATED])}
    -unless subjects_disabled
      .counter(data-prefix="#{number_with_delimiter stats[DeedType::PAGE_INDEXED]}") #{t('.page_indexed', count: stats[DeedType::PAGE_INDEXED])}
      .counter(data-prefix="#{number_with_delimiter stats[:mentions]}") #{t('.reference', count: stats[:mentions])}
      .counter(data-prefix="#{number_with_delimiter stats[:subjects]}") #{t('.new_subject', count: stats[:subjects])}
    .counter(data-prefix="#{number_with_delimiter stats[DeedType::NOTE_ADDED]}") #{t('.note', count: stats[DeedType::NOTE_ADDED])}
    -if @collection.works.where(ocr_correction: true).exists?
      .counter(data-prefix="#{number_with_delimiter stats[DeedType::OCR_CORRECTED]}") #{t('.ocr_correction', count: stats[DeedType::OCR_CORRECTED])}
